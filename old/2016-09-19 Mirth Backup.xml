<serverConfiguration version="3.4.1">
  <date>2016-09-19 12:45:25</date>
  <channelGroups/>
  <channels>
    <channel version="3.4.1">
      <id>5e0d673f-da20-4a09-9c98-0266cc7d5326</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>ddw-ingest</name>
      <description>DICOM Data Warehouse&#xd;
&#xd;
Steve Langer 2011&#xd;
&#xd;
General purpose DICOM reciever, then passes DCM files on to the ddw-parser channel. No warrenty is expressed or implied&#xd;
&#xd;
External Dependencies: This MIRTH channel is meant to work with the DDW.sql postgreSQL dbase&#xd;
&#xd;
</description>
      <enabled>true</enabled>
      <lastModified>
        <time>1474307037504</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <revision>2</revision>
      <sourceConnector version="3.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.dimse.DICOMReceiverProperties" version="3.4.1">
          <pluginProperties/>
          <listenerConnectorProperties version="3.4.1">
            <host>127.0.0.1</host>
            <port>104</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <applicationEntity></applicationEntity>
          <localHost></localHost>
          <localPort></localPort>
          <localApplicationEntity></localApplicationEntity>
          <soCloseDelay>50</soCloseDelay>
          <releaseTo>5</releaseTo>
          <requestTo>5</requestTo>
          <idleTo>60</idleTo>
          <reaper>10</reaper>
          <rspDelay>0</rspDelay>
          <pdv1>false</pdv1>
          <sndpdulen>16</sndpdulen>
          <rcvpdulen>16</rcvpdulen>
          <async>0</async>
          <bigEndian>false</bigEndian>
          <bufSize>1</bufSize>
          <defts>false</defts>
          <dest>/mnt/dcm</dest>
          <nativeData>false</nativeData>
          <sorcvbuf>0</sorcvbuf>
          <sosndbuf>0</sosndbuf>
          <tcpDelay>true</tcpDelay>
          <keyPW></keyPW>
          <keyStore></keyStore>
          <keyStorePW></keyStorePW>
          <noClientAuth>true</noClientAuth>
          <nossl2>true</nossl2>
          <tls>notls</tls>
          <trustStore></trustStore>
          <trustStorePW></trustStorePW>
        </properties>
        <transformer version="3.4.1">
          <steps>
            <step>
              <sequenceNumber>0</sequenceNumber>
              <name>patientsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>1</sequenceNumber>
              <name>patientId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>2</sequenceNumber>
              <name>patientsBirthDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsBirthDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsBirthDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>3</sequenceNumber>
              <name>patientsSex</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100040&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSex&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsSex</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100040&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>4</sequenceNumber>
              <name>bodyPartExamined</name>
              <script>var mapping;try { mapping = msg[&apos;tag00180015&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;bodyPartExamined&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>bodyPartExamined</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00180015&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>5</sequenceNumber>
              <name>patientsAge</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsAge&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsAge</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>6</sequenceNumber>
              <name>patientsSize</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSize&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsSize</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>7</sequenceNumber>
              <name>patientsWeight</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsWeight&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsWeight</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>8</sequenceNumber>
              <name>pregnancyStatus</name>
              <script>var mapping;try { mapping = msg[&apos;tag001021C0&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;pregnancyStatus&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>pregnancyStatus</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag001021C0&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>9</sequenceNumber>
              <name>modality</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;modality&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>modality</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>10</sequenceNumber>
              <name>manufacturer</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturer&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>manufacturer</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>11</sequenceNumber>
              <name>manufacturersModelName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturersModelName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>manufacturersModelName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>12</sequenceNumber>
              <name>softwareVersions</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;softwareVersions&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>softwareVersions</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>13</sequenceNumber>
              <name>sourceApplicationEntityTitle</name>
              <script>var mapping;try { mapping = msg[&apos;tag00020016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sourceApplicationEntityTitle&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sourceApplicationEntityTitle</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00020016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>14</sequenceNumber>
              <name>stationName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;stationName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>stationName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>15</sequenceNumber>
              <name>accessionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080050&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;accessionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>accessionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080050&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>16</sequenceNumber>
              <name>studyDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>17</sequenceNumber>
              <name>studyTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>18</sequenceNumber>
              <name>seriesTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080031&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080031&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>19</sequenceNumber>
              <name>acquisitionTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080032&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>acquisitionTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080032&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>20</sequenceNumber>
              <name>contentTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080033&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;contentTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>contentTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080033&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>21</sequenceNumber>
              <name>referringPhysiciansName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;referringPhysiciansName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>referringPhysiciansName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>22</sequenceNumber>
              <name>institutionName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080080&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;institutionName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>institutionName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080080&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>23</sequenceNumber>
              <name>operatorsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;operatorsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>operatorsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>24</sequenceNumber>
              <name>nameOfPhysiciansReadingStudy</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;nameOfPhysiciansReadingStudy&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>nameOfPhysiciansReadingStudy</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>25</sequenceNumber>
              <name>studyInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000D&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000D&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>26</sequenceNumber>
              <name>sopInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080018&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sopInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080018&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>27</sequenceNumber>
              <name>seriesInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>28</sequenceNumber>
              <name>sopClassUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopClassUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sopClassUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>29</sequenceNumber>
              <name>studyDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>30</sequenceNumber>
              <name>seriesDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag0008103E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0008103E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>31</sequenceNumber>
              <name>studyId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>32</sequenceNumber>
              <name>seriesNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200011&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200011&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>33</sequenceNumber>
              <name>acquisitionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200012&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>acquisitionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200012&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>34</sequenceNumber>
              <name>instanceNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200013&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;instanceNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>instanceNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200013&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>35</sequenceNumber>
              <name>protocolName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;protocolName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>protocolName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>36</sequenceNumber>
              <name>imageType</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080008&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;imageType&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>imageType</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080008&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>37</sequenceNumber>
              <name>viewPosition</name>
              <script>var mapping;try { mapping = msg[&apos;tag00185101&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;viewPosition&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>viewPosition</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00185101&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
          </steps>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>DICOM</inboundDataType>
          <outboundDataType>DICOM</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
        </transformer>
        <filter version="3.4.1">
          <rules/>
        </filter>
        <transportName>DICOM Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <script>// just a dummy destination - the real purpose of this chaennel is just 
// as a DICOM reciever for the real ddw channel
return ; 
</script>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data


return;

</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DISABLED</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <tags class="linked-hash-set"/>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.4.1">
          <className>com.mirth.connect.server.attachments.dicom.DICOMAttachmentHandlerProvider</className>
          <type>DICOM</type>
          <properties/>
        </attachmentProperties>
        <archiveEnabled>true</archiveEnabled>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <codeTemplateLibraries/>
    </channel>
    <channel version="3.4.1">
      <id>c3dddea8-6555-43bd-b156-a764af3d9767</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>ddw_6-27</name>
      <description>DICOM Data Warehouse&#xd;
&#xd;
Steve Langer 2011&#xd;
&#xd;
General purpose DICOM reciever, parser and mapper to enable DICOM data mining. No warrenty is expressed or implied&#xd;
&#xd;
External Dependencies: This MIRTH channel is meant to work with the DDW.sql postgreSQL dbase&#xd;
&#xd;
</description>
      <enabled>true</enabled>
      <lastModified>
        <time>1474307099398</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <revision>2</revision>
      <sourceConnector version="3.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.4.1">
          <pluginProperties/>
          <pollConnectorProperties version="3.4.1">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>1000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>/mnt/dcm</host>
          <fileFilter>*.*</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>NONE</afterProcessingAction>
          <moveToDirectory></moveToDirectory>
          <moveToFileName></moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>false</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>true</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="3.4.1">
          <steps>
            <step>
              <sequenceNumber>0</sequenceNumber>
              <name>patientsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>1</sequenceNumber>
              <name>patientId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>2</sequenceNumber>
              <name>patientsBirthDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsBirthDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsBirthDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>3</sequenceNumber>
              <name>patientsSex</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100040&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSex&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsSex</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100040&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>4</sequenceNumber>
              <name>bodyPartExamined</name>
              <script>var mapping;try { mapping = msg[&apos;tag00180015&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;bodyPartExamined&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>bodyPartExamined</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00180015&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>5</sequenceNumber>
              <name>patientsAge</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsAge&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsAge</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>6</sequenceNumber>
              <name>patientsSize</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSize&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsSize</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>7</sequenceNumber>
              <name>patientsWeight</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsWeight&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>patientsWeight</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>8</sequenceNumber>
              <name>pregnancyStatus</name>
              <script>var mapping;try { mapping = msg[&apos;tag001021C0&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;pregnancyStatus&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>pregnancyStatus</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag001021C0&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>9</sequenceNumber>
              <name>modality</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;modality&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>modality</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>10</sequenceNumber>
              <name>manufacturer</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturer&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>manufacturer</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>11</sequenceNumber>
              <name>manufacturersModelName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturersModelName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>manufacturersModelName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>12</sequenceNumber>
              <name>softwareVersions</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;softwareVersions&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>softwareVersions</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>13</sequenceNumber>
              <name>sourceApplicationEntityTitle</name>
              <script>var mapping;try { mapping = msg[&apos;tag00020016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sourceApplicationEntityTitle&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sourceApplicationEntityTitle</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00020016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>14</sequenceNumber>
              <name>stationName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;stationName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>stationName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>15</sequenceNumber>
              <name>accessionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080050&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;accessionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>accessionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080050&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>16</sequenceNumber>
              <name>studyDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>17</sequenceNumber>
              <name>studyTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>18</sequenceNumber>
              <name>seriesTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080031&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080031&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>19</sequenceNumber>
              <name>acquisitionTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080032&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>acquisitionTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080032&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>20</sequenceNumber>
              <name>contentTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080033&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;contentTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>contentTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080033&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>21</sequenceNumber>
              <name>referringPhysiciansName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;referringPhysiciansName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>referringPhysiciansName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>22</sequenceNumber>
              <name>institutionName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080080&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;institutionName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>institutionName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080080&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>23</sequenceNumber>
              <name>operatorsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;operatorsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>operatorsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>24</sequenceNumber>
              <name>nameOfPhysiciansReadingStudy</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;nameOfPhysiciansReadingStudy&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>nameOfPhysiciansReadingStudy</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>25</sequenceNumber>
              <name>studyInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000D&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000D&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>26</sequenceNumber>
              <name>sopInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080018&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sopInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080018&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>27</sequenceNumber>
              <name>seriesInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>28</sequenceNumber>
              <name>sopClassUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopClassUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>sopClassUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>29</sequenceNumber>
              <name>studyDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>30</sequenceNumber>
              <name>seriesDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag0008103E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0008103E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>31</sequenceNumber>
              <name>studyId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>studyId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>32</sequenceNumber>
              <name>seriesNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200011&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>seriesNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200011&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>33</sequenceNumber>
              <name>acquisitionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200012&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>acquisitionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200012&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>34</sequenceNumber>
              <name>instanceNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200013&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;instanceNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>instanceNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200013&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>35</sequenceNumber>
              <name>protocolName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;protocolName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>protocolName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>36</sequenceNumber>
              <name>imageType</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080008&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;imageType&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>imageType</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080008&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>37</sequenceNumber>
              <name>viewPosition</name>
              <script>var mapping;try { mapping = msg[&apos;tag00185101&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;viewPosition&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data>
                <entry>
                  <string>Variable</string>
                  <string>viewPosition</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00185101&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
          </steps>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>DICOM</inboundDataType>
          <outboundDataType>DICOM</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
        </transformer>
        <filter version="3.4.1">
          <rules/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <driver>org.postgresql.Driver</driver>
            <url>jdbc:postgresql://localhost:5432/ddw</url>
            <username>postgres</username>
            <password>postgres</password>
            <query>///////////////////////////////////////
// Dicom Data Warehouse (DDW)
// Author: Steve G Langer April 2011
// Purpose: Mirth Dicom channel for the DDW dbase
///////////////////////////////////////
try {
	var func = &quot;mirth:main &quot;;
	logError (&quot;\n\n\n start &quot; + func + DateUtil.getCurrentDate(&apos;yyyy-M-d H:m:s&apos;));
	//var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://localhost:5432/ddw&apos;,&apos;postgres&apos;,&apos;medic4Img&apos;);
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://ddw-dbase:5432/ddw&apos;,&apos;postgres&apos;,&apos;postgres&apos;);
	//logger.info (&apos;1 &apos; + dbConn);
	//get whole DICOM header, mine them in mapCustomTags()
    var msg = new XML(messageObject.getTransformedData().toString());
	var updatePatient, updateExam, updateSeries, updateAcq, updateInstance, updateAlert ;
	var parmPatient, parmExam, parmSeries, parmAcq, parmInstance, parmAlert ;
	var checkVersion, checkAlert, checkExams; 
	var parmVersion,  parmCheckAlert, parmCheckExams; 
	var checkLast, parmLast, updateLast, parmUpdateLast; 
	var Production = true, Archive = false ;

	buildStrings ()

	// check if this scanner Version is known
	var result = qryExist (checkVersion, parmVersion);
	if (!result.next()) {
		var s = &quot;unknown_version&gt; on &quot; + $(&apos;stationName&apos;) + &quot;; &quot; + $(&apos;manufacturersModelName&apos;) + &quot;; &quot; + $(&apos;softwareVersions&apos;);
		throw s ;
	} else {
		var versionID = result.getString(&apos;version_id&apos;);
	}
	
	//Accelerator Section, if activated
	// this will cause only first object in a series to be indexed
	if (!Archive) {
		var result = qryExist (checkLast, parmLast);
		if (!result.next() ) {
			result = dbaseUpdate (updateLast, parmUpdateLast);
			//logger.info(&apos;updated last_uid table &apos; + $(&apos;seriesInstanceUid&apos;)) ;
		} else {
			//logger.info (&apos;in breakout, series = &apos; + $(&apos;seriesInstanceUid&apos;));
			throw new breakout() ;
		}
	}

	// Bail if patient info is null
	if ( $(&apos;patientId&apos;) == &apos;&apos; || $(&apos;patientsName&apos;) == &apos;&apos;) {
		var s = &quot;no_patient&gt; info, aborting. StudyUID = &quot; + $(&apos;studyInstanceUid&apos;);
		throw s;
	}

	// Now create patient -only- if patient is not known
	result = dbaseUpdate (updatePatient, parmPatient);

	// create Exam row -only- if examUID is unknown
	result = dbaseUpdate (updateExam, parmExam);
	result = mapCustomTags(&quot;exam&quot;);	

	// create Series row -only- if seriesUID is unknown
	// We could not know versionID at buildStrings()
	parmSeries.add (versionID );
	parmSeries.add ( $(&apos;seriesTime&apos;) );
	parmSeries.add ( $(&apos;modality&apos;)  );
	result = dbaseUpdate (updateSeries, parmSeries);
	result = mapCustomTags(&quot;series&quot;);		

	// create Acquisition row -only- if does not exist
	result = dbaseUpdate (updateAcq, parmAcq);
	result = mapCustomTags(&quot;acquisition&quot;);

	// create Instance row  -only- if instanceUID is unknown
	result = dbaseUpdate (updateInstance, parmInstance);
	result = mapCustomTags(&quot;instance&quot;);
	// this if-block is for the instance binary object table (i.e DOSE SC)
	if ($(&apos;modality&apos;).indexOf(&apos;CT&apos;) &gt; -1 &amp;&amp; $(&apos;imageType&apos;).indexOf(&apos;SECONDARY&apos;) &gt; -1 ) {
        var jpegs = new DICOMUtil.convertDICOM(&apos;jpg&apos;, messageObject);
		parms = new java.util.ArrayList();
		parms.add ($(&apos;sopInstanceUid&apos;));
		parms.add ($(&apos;studyDate&apos;));
		parms.add (messageObject.getTransformedData());
		parms.add (FileUtil.decode(jpegs));
		dbaseUpdate(&quot;INSERT INTO instance_binary_object (instance_uid, date_of_exam, header, content) VALUES (?, ?, ?, ?)&quot;, parms);
	} else if (Archive ) {
		parms = new java.util.ArrayList();
		parms.add ($(&apos;sopInstanceUid&apos;));
		parms.add ($(&apos;studyDate&apos;));
		parms.add (messageObject.getTransformedData());
		dbaseUpdate(&quot;INSERT INTO instance_binary_object (instance_uid, date_of_exam, header) VALUES (?, ?, ?)&quot;, parms);
	}

	// Last update the Exams_to_Process table
	result = dbaseUpdate (updateExamProcess, parmExamProcess);
}
catch (e if e instanceof breakout) {
	//logError (&quot;catch breakout&quot;) ;
	x = 1;
}
catch (ee) {
	var err_str = &quot;Exception in &quot; + func + &quot;\n&quot; + ee ;
	logger.info (err_str);
	var alert_type = ee.substring(0, ee.indexOf(&apos;&gt;&apos;)) ;
	parmCheckAlert.add (alert_type);
	result = qryExist (checkAlert, parmCheckAlert);

	if (Production &amp;&amp; result.next() ) {
		// write to logFile, dbase and if urgent email
		logError (err_str + &quot;\n exception end&quot; );
		parmAlert.add (result.getString(&apos;alert_type&apos;));
		parmAlert.add (err_str);
		dbaseUpdate (updateAlert, parmAlert);
		if (result.getString(&apos;criticality&apos;) &gt;1) {
			sendEmail(result.getString(&apos;email_to_address&apos;), &apos;&apos;, result.getString(&apos;email_title&apos;), err_str) ;
		}
	} else {
		logError (err_str + &quot;\n exception end&quot; );
	}
}
finally {
	dbConn.close();
	logError (&quot;normal end &quot; + DateUtil.getCurrentDate(&apos;H:m:s&apos;));
}

	
function breakout () {
/////////////////////////////
// Purpose: stub for exception handling
// caller: main try
///////////////////////////////
	func = &quot;mirth:breakout &quot;;
	return ;
}


function buildStrings () {
////////////////////////////////////
// Purpose: Centrallize all SQL here
// Caller: main
/////////////////////////////////////
	func = &quot;mirth:buildStrings &quot;;

	// check last UIDs
	checkLast = &quot;SELECT series from last_uids WHERE gateway ~* ? and series ~* ? &quot; ;
	parmLast = new java.util.ArrayList();
	parmLast.add(&apos;mcr-dit2&apos;) ;
	parmLast.add($(&apos;seriesInstanceUid&apos;)) ;
	
	updateLast = &quot;UPDATE last_uids SET study=?, series=?, instance=? where gateway=&apos;mcr-dit2&apos; &quot;;
	parmUpdateLast = new java.util.ArrayList();
	parmUpdateLast.add( $(&apos;studyInstanceUid&apos;)); 
	parmUpdateLast.add( $(&apos;seriesInstanceUid&apos;)) ;
	parmUpdateLast.add( $(&apos;sopInstanceUid&apos;));

	// check version
	checkVersion = &quot;SELECT version_id FROM known_scanners WHERE model ~* ? AND vers ~* ?&quot; ;
	parmVersion = new java.util.ArrayList();
	parmVersion.add( $(&apos;manufacturersModelName&apos;));
	parmVersion.add($(&apos;softwareVersions&apos;).replace(&apos;\\&apos;,&apos;_&apos;));

	// check-update patient
	updatePatient = &quot;INSERT INTO patient (pat_name, dob, local_pat_id, mpi_pat_id, gender) VALUES (?,?,?,?,?)&quot;;
	parmPatient = new java.util.ArrayList();
	parmPatient.add ( $(&apos;patientsName&apos;) );
	parmPatient.add ( $(&apos;patientsBirthDate&apos;) );
	parmPatient.add ( $(&apos;patientId&apos;) );
	parmPatient.add ( $(&apos;patientId&apos;) );
	parmPatient.add ( $(&apos;patientsSex&apos;) );
	//parmPatient.add (parseInt($(&apos;patientsSize&apos;)));
	//parmPatient.add (parseInt($(&apos;patientsWeight&apos;)));

	// check-update examUID
	checkExams = &quot;SELECT accession FROM exams WHERE exam_uid ~* ?&quot;;
	parmCheckExams  = new java.util.ArrayList();
	parmCheckExams.add ($(&apos;studyInstanceUid&apos;));

	updateExam = &quot;INSERT INTO exams (mpi_pat_id, exam_uid, accession, date_of_exam, time_of_exam, refer_doc, exam_descrip, exam_code, campus, technologist, radiologist) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
	parmExam = new java.util.ArrayList();
	parmExam.add ( $(&apos;patientId&apos;));
	parmExam.add ($(&apos;studyInstanceUid&apos;));
	parmExam.add ( $(&apos;accessionNumber&apos;));
	parmExam.add ( $(&apos;studyDate&apos;));
	parmExam.add ($(&apos;studyTime&apos;) );
	parmExam.add ( $(&apos;referringPhysiciansName&apos;));
	parmExam.add ( $(&apos;studyDescription&apos;));
	parmExam.add ( &apos;&apos;);
	parmExam.add ( $(&apos;institutionName&apos;));
	parmExam.add ( $(&apos;operatorsName&apos;));
	parmExam.add ( $(&apos;nameOfPhysiciansReadingStudy&apos;));
	
	// check-update seriesUID
	updateSeries = &quot;INSERT INTO series (exam_uid, series_uid, station_id, aet, series_description, protocol_name, series_name, body_part, series_number, version_id, series_time, modality) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
	parmSeries = new java.util.ArrayList();
	parmSeries.add ($(&apos;studyInstanceUid&apos;) );
	parmSeries.add ( $(&apos;seriesInstanceUid&apos;) );
	parmSeries.add ( $(&apos;stationName&apos;));
	parmSeries.add ( $(&apos;sourceApplicationEntityTitle&apos;));
	parmSeries.add ( $(&apos;seriesDescription&apos;) );
	parmSeries.add ( $(&apos;protocolName&apos;));
	parmSeries.add ( $(&apos;seriesDescription&apos;));
	parmSeries.add ( $(&apos;bodyPartExamined&apos;));
	parmSeries.add ( $(&apos;seriesNumber&apos;));
	///// VersionID add deferred until call to dbaseUpdate

	// check-update Acquisition
	updateAcq = &quot;INSERT INTO acquisition (acq_time, acq_number, sop_class, exam_uid, series_uid, event_uid) VALUES (?, ?, ?, ?, ?, ?)&quot;;
	parmAcq = new java.util.ArrayList();
	parmAcq.add ($(&apos;acquisitionTime&apos;));
	parmAcq.add ($(&apos;acquisitionNumber&apos;));
	parmAcq.add ($(&apos;sopClassUid&apos;));
	parmAcq.add ($(&apos;studyInstanceUid&apos;));
	parmAcq.add ($(&apos;seriesInstanceUid&apos;));
	parmAcq.add (&apos;&apos;);

	// check-update InstanceUID
	updateInstance = &quot;INSERT INTO instance (exam_uid, series_uid, instance_uid, content_time, instance_number, image_type) VALUES (?, ?, ?, ?, ?, ?)&quot;;
	parmInstance = new java.util.ArrayList();
	parmInstance.add ($(&apos;studyInstanceUid&apos;));
	parmInstance.add ($(&apos;seriesInstanceUid&apos;));
	parmInstance.add ($(&apos;sopInstanceUid&apos;));
	parmInstance.add ($(&apos;contentTime&apos;));
	parmInstance.add ($(&apos;instanceNumber&apos;));
	parmInstance.add ( $(&apos;imageType&apos;));

	// check-Update Exam_to_Process
	updateExamProcess = &quot;INSERT INTO exams_to_process (exam_uid, modality, run_trial) VALUES (?, ?, ?)&quot;;
	parmExamProcess =  new java.util.ArrayList();
	parmExamProcess.add ($(&apos;studyInstanceUid&apos;));
	parmExamProcess.add ($(&apos;modality&apos;));
	parmExamProcess.add (0);
	
	// check-update Alert_types
	checkAlert = &quot;SELECT * FROM dict_alert_types WHERE alert_type ~* ?&quot;;
	parmCheckAlert = new java.util.ArrayList();
	///// defer add until Catch

	updateAlert = &quot;INSERT INTO alerts (exam_uid, mpi_pat_id, date_open, alert_type, message) VALUES (?, ?, ?, ?, ?)&quot;;
	parmAlert = new java.util.ArrayList();
	parmAlert.add ($(&apos;studyInstanceUid&apos;));
	parmAlert.add ($(&apos;patientId&apos;));
	parmAlert.add (DateUtil.getCurrentDate(&apos;yyyy-M-d H:m:s&apos;));
	////// other elements deferred until Catch

	return ;
}

function dbaseUpdate (str, params) {
////////////////////////////////////
// Purpose: Centralize dbase updates and
//	error handling
// Caller: Main and mapCustomTags
/////////////////////////////////////
	func= &quot;mirth:dbaseUpdate &quot;;
	
	if ($(&apos;modality&apos;) == &apos;CT&apos; &amp;&amp; str.indexOf(&apos;INTO exams &apos;) &gt; -1) {
		// here over-ride the Exam Insert statement until we find bad data
		//logger.info (func + &apos; &apos; + &apos;in update override&apos;);
	}

	try {
		var loc_result = dbConn.executeUpdate (str, params);
	}
	catch (ee) {
		// If here,  likely that we violated a UNIQUE constraint
		logError (func, + &apos;unable to Update table &apos; + loc_result.next() );
		logger.info (&apos;dbaseUpdate fail &apos; + loc_result.next() );
	}
	finally {
		if (loc_result != 1 &amp;&amp; loc_result != undefined ) {
			logger.error (&apos;dbaseUpdate results &apos; + str + &apos; &apos; + params + &apos; is &apos; + loc_result );
			//logger.info (loc_result + loc_result.next);
		}
		return loc_result;
	}
}


function qryExist (str, param) {
////////////////////////////////////
// Purpose: Centralize dbase qry and error
//	handling
// Caller: Main and mapCustomTags()
/////////////////////////////////////
	func = &quot;mirth:qryExist &quot;;

	//logError (str + param);
	var loc_result = dbConn.executeCachedQuery(str, param);
	//logger.info (&apos;qryExist result  &apos; + loc_result.next);
	return loc_result;
}


function mapCustomTags (scope) {
/////////////////////////////////////////////
// Purpose: This is the secret sauce that
//	enables indexing arbitrary tags per Version
//	w/out new Tables/Columns or NoSQL
// Caller: Exam/Series/Instance update Blocks in main
/////////////////////////////////////////////
	var loc_func = &quot;mirth:mapCustomTags &quot;;
	var strUpdate, uid ;
	var parmUpdate = new java.util.ArrayList();
	var strQry = &quot;SELECT std_name, unit, dicom_grp_ele FROM mapp_view WHERE scope ~* ? AND version_id = ?&quot;;
	var parmQry = new java.util.ArrayList();

	parmQry.add (scope);
	parmQry.add (parseInt(versionID)); //does this need parseInt now that it&apos;s not an oid?

	if (scope == &apos;exam&apos;) {
		strUpdate = &quot;INSERT INTO exams_mapped_values (exam_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;studyInstanceUid&apos;) ;
	} else if (scope == &apos;series&apos;) {
		//logError (&apos;mapCustom tags series&apos;);
		strUpdate = &quot;INSERT INTO series_mapped_values (series_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid =  $(&apos;seriesInstanceUid&apos;) ;
	} else if (scope == &apos;acquisition&apos;) {
		strUpdate = &quot;INSERT INTO acquisition_mapped_values (event_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;&apos;) ;
	} else if (scope == &apos;instance&apos;) {
		strUpdate = &quot;INSERT INTO instance_mapped_values (instance_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;sopInstanceUid&apos;) ;
	}

	// need a View linking stdNames to mappedValues, then Qry the View for the 
	// list of custom tags. Loop over the result set, and pluck named tags from
	// -var msg- defined in the try block
	result = qryExist (strQry, parmQry) ;
	while (result.next() ) {
		parmUpdate.add (uid);
		parmUpdate.add (result.getString(&apos;std_name&apos;) );
		var string = &apos;&apos; ;

		if (result.getString(&apos;std_name&apos;).indexOf(&apos;dose_SR&apos;) &gt; -1 ) {
			var items = msg[result.getString(&apos;dicom_grp_ele&apos;)][&apos;item&apos;];
			if (items.length() &gt; 0) {
				string = items[result.getString(&apos;dicom_grp_ele&apos;)].toString() ;
				logger.info(&apos;CT-SR string 2 : &apos; + string);
			} else {
				// SR object won&apos;t have most (if any) of other tags we Map so ...
				logger.info(&apos;else1 : &apos; + result.getString(&apos;dicom_grp_ele&apos;));
				logger.info(&apos;else2 : &apos; + msg[result.getString(&apos;dicom_grp_ele&apos;)].toString());
				continue ; 
			}
		} else {
			string =  msg[result.getString(&apos;dicom_grp_ele&apos;)].toString() ;
		}

		if ( (string.indexOf(&apos;\\&apos;) == 2) &amp;&amp; string.indexOf(&apos;-&apos;) &gt; 0) { 
			// if it starts with &apos;xx\&apos; its a Hex string, but be careful
			// if it&apos;s Direction Cosines it looks like -1\0\1\0\0
			logger.info (&quot;in Hex &quot; + result.getString(&apos;dicom_grp_ele&apos;));
			var str2 = convert_shadowHex_to_ASCII(string);
			parmUpdate.add (str2) ;
		}
		else {
			//logError (&quot;in else &quot; + result.getString(&apos;dicom_grp_ele&apos;));
			//logger.info (&quot;in Hex else &quot; + result.getString(&apos;dicom_grp_ele&apos;) + &quot; = &quot; + string);
			parmUpdate.add (string);		
		}
		parmUpdate.add ( result.getString(&apos;unit&apos;) );
		var loc_result = dbaseUpdate (strUpdate, parmUpdate);
		if (loc_result != 1 &amp;&amp; $(&apos;modality&apos;) == &apos;CT&apos;) {
			//logger.info (loc_func + &apos; &apos; + strUpdate + parmUpdate);
		}
		parmUpdate.clear();
	}
}



</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.4.1">
          <metaDataId>2</metaDataId>
          <name>Destination 2</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>/opt/mirth/error_images</host>
            <outputPattern>transformed.rtf</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>here:
${date.get(&apos;yyyy-M-d H.m.s&apos;)}
${patientsName}
${patientId}
${sourceApplicationEntityTitle}
${message.transformedData}</template>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>DICOM</inboundDataType>
            <outboundDataType>DICOM</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="3.4.1"/>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data


return;

</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DISABLED</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <tags class="linked-hash-set"/>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.4.1">
          <className>com.mirth.connect.server.attachments.dicom.DICOMAttachmentHandlerProvider</className>
          <type>DICOM</type>
          <properties/>
        </attachmentProperties>
        <archiveEnabled>true</archiveEnabled>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <codeTemplateLibraries/>
    </channel>
  </channels>
  <alerts/>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.4.1">
      <id>c420fcdc-fbde-4517-a7b8-7c389c44e864</id>
      <name>Library 1</name>
      <revision>1</revision>
      <lastModified>
        <time>1474306877728</time>
        <timezone>Etc/UTC</timezone>
      </lastModified>
      <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds/>
      <disabledChannelIds/>
      <codeTemplates>
        <codeTemplate version="3.4.1">
          <id>4c26414c-82e6-4a40-a4c4-c065f7e6532a</id>
          <name>convert_shadowHex_to_ASCII</name>
          <revision>1</revision>
          <lastModified>
            <time>1474306877777</time>
            <timezone>Etc/UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	take an DICOM shadows Hex group and return an ASCII string
*/
function convert_shadowHex_to_ASCII(str) {
////////////////////////////////////////////////////
// Purpose: take in a shadow group in Hex, return ASCII string
// Caller: DICOM parser channel
//
/////////////////////////////////////////////////
	var substr, str2=&quot;&quot;, buf=&quot;&quot;;
	//t_logError (&quot;entering convert \n&quot; + str);

	while (str.length &gt; 3) {
	  substr  = &quot;0x&quot; + str.slice(0, str.indexOf(&apos;\\&apos;)) ;
	  str2 = String.fromCharCode(substr);
	  buf = buf + str2 ;
	  str = str.substring(str.indexOf(&apos;\\&apos;)+ 1); 
	}
	//t_logError (&quot;exiting convert \n&quot; + buf);
	return buf;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.1">
          <id>f43b2d54-07d9-43c6-8a4f-f36ba1856c33</id>
          <name>logError</name>
          <revision>1</revision>
          <lastModified>
            <time>1474306878074</time>
            <timezone>Etc/UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	global logging func for Prod Log
*/
function logError (str) {
////////////////////////////////////
// Purpose: Central output for debug messaging
//		Use this version for Prod Log
// Caller: throughout this code
/////////////////////////////////////
	str = str + &quot;\n&quot; ;
   	FileUtil.write(&apos;/media/dbase/error_images/log.rtf&apos;, true, str);
	return ;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.1">
          <id>65d692d7-becc-4150-8975-3e53877c0908</id>
          <name>sendEmail</name>
          <revision>1</revision>
          <lastModified>
            <time>1474306878001</time>
            <timezone>Etc/UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	used in Catch blocks to alert user of Critical error (in addition to log file and dbase)
*/
function sendEmail(to, cc, title, content){
////////////////////////////////////
// Purpose: For Exceptions in Prod, this
//		emails ALerts to &quot;to&quot;
// Caller: Catch
//
// var smtpConn = SMTPConnectionFactory.createSMTPConnection();
// smtpConn.send(&apos;to&apos;, &apos;cc&apos;, &apos;from&apos;, &apos;subject&apos;, &apos;body&apos;);
/////////////////////////////////////
   var host = &apos;smtprelay.mayo.edu&apos;;
   var port = &apos;25&apos; , auth = false, secure = &apos;&apos;, password = &apos;&apos;;
   var username = &apos;dlradtrac@mayo.edu&apos;, from = &apos;dlradtrac@mayo.edu&apos;;
   var smtpConn = new SMTPConnectionFactory.createSMTPConnection(host, port, auth, secure, username, password);
   smtpConn.send(to, cc, from, title, content);
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.1">
          <id>b2840940-9e61-4960-a5f4-3f96848f852a</id>
          <name>t_logError</name>
          <revision>1</revision>
          <lastModified>
            <time>1474306877902</time>
            <timezone>Etc/UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	global template for Test logging
*/
function t_logError (str) {
////////////////////////////////////
// Purpose: Central output for debug messaging
// Caller: throughout this code
/////////////////////////////////////
	str = str + &quot;\n&quot; ;
   	FileUtil.write(&apos;/media/dbase/error_images/test-log.rtf&apos;, true, str);
	return ;
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <serverSettings>
    <clearGlobalMap>true</clearGlobalMap>
    <queueBufferSize>1000</queueBufferSize>
    <defaultMetaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </defaultMetaDataColumns>
    <smtpTimeout>5000</smtpTimeout>
    <smtpSecure>0</smtpSecure>
    <smtpAuth>false</smtpAuth>
  </serverSettings>
  <updateSettings version="3.4.1">
    <statsEnabled>true</statsEnabled>
    <lastStatsTime>1435767529079</lastStatsTime>
  </updateSettings>
  <globalScripts>
    <entry>
      <string>Undeploy</string>
      <string>// This script executes once when all channels shut down from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Deploy</string>
      <string>// This script executes once when all channels start up from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Preprocessor</string>
      <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
    </entry>
    <entry>
      <string>Postprocessor</string>
      <string>// This script executes once after a message has been processed
// This script applies across all channels
return;</string>
    </entry>
  </globalScripts>
  <pluginProperties>
    <entry>
      <string>Data Pruner</string>
      <properties>
        <property name="archiveEnabled">false</property>
        <property name="enabled">true</property>
        <property name="interval">daily</property>
        <property name="pollingProperties">&lt;com.mirth.connect.donkey.model.channel.PollConnectorProperties version=&quot;3.3.0&quot;&gt;&#xd;
&lt;pollingType&gt;TIME&lt;/pollingType&gt;&#xd;
&lt;pollOnStart&gt;false&lt;/pollOnStart&gt;&#xd;
&lt;pollingFrequency&gt;3600000&lt;/pollingFrequency&gt;&#xd;
&lt;pollingHour&gt;0&lt;/pollingHour&gt;&#xd;
&lt;pollingMinute&gt;0&lt;/pollingMinute&gt;&#xd;
&lt;cronJobs/&gt;&#xd;
&lt;pollConnectorPropertiesAdvanced&gt;&#xd;
&lt;weekly&gt;true&lt;/weekly&gt;&#xd;
&lt;inactiveDays&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;boolean&gt;false&lt;/boolean&gt;&#xd;
&lt;/inactiveDays&gt;&#xd;
&lt;dayOfMonth&gt;1&lt;/dayOfMonth&gt;&#xd;
&lt;allDay&gt;true&lt;/allDay&gt;&#xd;
&lt;startingHour&gt;8&lt;/startingHour&gt;&#xd;
&lt;startingMinute&gt;0&lt;/startingMinute&gt;&#xd;
&lt;endingHour&gt;17&lt;/endingHour&gt;&#xd;
&lt;endingMinute&gt;0&lt;/endingMinute&gt;&#xd;
&lt;/pollConnectorPropertiesAdvanced&gt;&#xd;
&lt;/com.mirth.connect.donkey.model.channel.PollConnectorProperties&gt;&#xd;
</property>
        <property name="pruningBlockSize">0</property>
        <property name="time">12:00 AM</property>
      </properties>
    </entry>
  </pluginProperties>
  <resourceProperties>
    <list>
      <com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties version="3.4.1">
  <pluginPointName>Directory Resource</pluginPointName>
        <type>Directory</type>
        <id>Default Resource</id>
        <name>[Default Resource]</name>
        <description>Loads libraries from the custom-lib folder in the Mirth Connect home directory.</description>
        <includeWithGlobalScripts>true</includeWithGlobalScripts>
        <directory>custom-lib</directory>
        <directoryRecursion>true</directoryRecursion>
      </com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties>
    </list>
  </resourceProperties>
  <channelDependencies/>
</serverConfiguration>