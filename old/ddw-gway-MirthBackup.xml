<serverConfiguration>
  <date>2016-01-11 13:21:19</date>
  <channels>
    <channel>
      <id>c3dddea8-6555-43bd-b156-a764af3d9767</id>
      <name>ddw_6-27</name>
      <description>DICOM Data Warehouse&#xd;
&#xd;
Steve Langer 2011&#xd;
&#xd;
General purpose DICOM reciever, parser and mapper to enable DICOM data mining. No warrenty is expressed or implied&#xd;
&#xd;
External Dependencies: This MIRTH channel is meant to work with the DDW.sql postgreSQL dbase&#xd;
&#xd;
</description>
      <enabled>true</enabled>
      <version>2.2.3.6825</version>
      <lastModified>
        <time>1452540013697</time>
        <timezone>Etc/UTC</timezone>
      </lastModified>
      <revision>4</revision>
      <sourceConnector>
        <name>sourceConnector</name>
        <properties>
          <property name="applicationEntity"></property>
          <property name="async">0</property>
          <property name="bigendian">0</property>
          <property name="bufsize">1</property>
          <property name="defts">0</property>
          <property name="dest"></property>
          <property name="host">127.0.0.1</property>
          <property name="idleto">60</property>
          <property name="keypw"></property>
          <property name="keystore"></property>
          <property name="keystorepw"></property>
          <property name="nativeData">0</property>
          <property name="noclientauth">1</property>
          <property name="nossl2">1</property>
          <property name="pdv1">0</property>
          <property name="port">104</property>
          <property name="rcvpdulen">16</property>
          <property name="reaper">10</property>
          <property name="releaseto">5</property>
          <property name="requestto">5</property>
          <property name="rspdelay">0</property>
          <property name="sndpdulen">16</property>
          <property name="soclosedelay">50</property>
          <property name="sorcvbuf">0</property>
          <property name="sosndbuf">0</property>
          <property name="tcpdelay">1</property>
          <property name="tls">notls</property>
          <property name="truststore"></property>
          <property name="truststorepw"></property>
        </properties>
        <transformer>
          <steps>
            <step>
              <sequenceNumber>0</sequenceNumber>
              <name>patientsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>1</sequenceNumber>
              <name>patientId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>2</sequenceNumber>
              <name>patientsBirthDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsBirthDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsBirthDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>3</sequenceNumber>
              <name>patientsSex</name>
              <script>var mapping;try { mapping = msg[&apos;tag00100040&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSex&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsSex</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00100040&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>4</sequenceNumber>
              <name>bodyPartExamined</name>
              <script>var mapping;try { mapping = msg[&apos;tag00180015&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;bodyPartExamined&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>bodyPartExamined</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00180015&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>5</sequenceNumber>
              <name>patientsAge</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsAge&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsAge</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>6</sequenceNumber>
              <name>patientsSize</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsSize&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsSize</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>7</sequenceNumber>
              <name>patientsWeight</name>
              <script>var mapping;try { mapping = msg[&apos;tag00101030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;patientsWeight&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>patientsWeight</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00101030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>8</sequenceNumber>
              <name>pregnancyStatus</name>
              <script>var mapping;try { mapping = msg[&apos;tag001021C0&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;pregnancyStatus&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>pregnancyStatus</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag001021C0&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>9</sequenceNumber>
              <name>modality</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;modality&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>modality</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>10</sequenceNumber>
              <name>manufacturer</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturer&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>manufacturer</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>11</sequenceNumber>
              <name>manufacturersModelName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;manufacturersModelName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>manufacturersModelName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>12</sequenceNumber>
              <name>softwareVersions</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;softwareVersions&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>softwareVersions</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>13</sequenceNumber>
              <name>sourceApplicationEntityTitle</name>
              <script>var mapping;try { mapping = msg[&apos;tag00020016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sourceApplicationEntityTitle&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>sourceApplicationEntityTitle</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00020016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>14</sequenceNumber>
              <name>stationName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;stationName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>stationName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>15</sequenceNumber>
              <name>accessionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080050&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;accessionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>accessionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080050&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>16</sequenceNumber>
              <name>studyDate</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080020&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDate&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>studyDate</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080020&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>17</sequenceNumber>
              <name>studyTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>studyTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>18</sequenceNumber>
              <name>seriesTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080031&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>seriesTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080031&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>19</sequenceNumber>
              <name>acquisitionTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080032&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>acquisitionTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080032&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>20</sequenceNumber>
              <name>contentTime</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080033&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;contentTime&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>contentTime</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080033&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>21</sequenceNumber>
              <name>referringPhysiciansName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080090&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;referringPhysiciansName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>referringPhysiciansName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080090&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>22</sequenceNumber>
              <name>institutionName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080080&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;institutionName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>institutionName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080080&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>23</sequenceNumber>
              <name>operatorsName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081070&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;operatorsName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>operatorsName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081070&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>24</sequenceNumber>
              <name>nameOfPhysiciansReadingStudy</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081060&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;nameOfPhysiciansReadingStudy&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>nameOfPhysiciansReadingStudy</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081060&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>25</sequenceNumber>
              <name>studyInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000D&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>studyInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000D&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>26</sequenceNumber>
              <name>sopInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080018&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>sopInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080018&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>27</sequenceNumber>
              <name>seriesInstanceUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag0020000E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesInstanceUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>seriesInstanceUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0020000E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>28</sequenceNumber>
              <name>sopClassUid</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080016&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sopClassUid&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>sopClassUid</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080016&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>29</sequenceNumber>
              <name>studyDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag00081030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>studyDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00081030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>30</sequenceNumber>
              <name>seriesDescription</name>
              <script>var mapping;try { mapping = msg[&apos;tag0008103E&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesDescription&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>seriesDescription</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag0008103E&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>31</sequenceNumber>
              <name>studyId</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200010&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;studyId&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>studyId</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200010&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>32</sequenceNumber>
              <name>seriesNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200011&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;seriesNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>seriesNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200011&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>33</sequenceNumber>
              <name>acquisitionNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200012&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;acquisitionNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>acquisitionNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200012&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>34</sequenceNumber>
              <name>instanceNumber</name>
              <script>var mapping;try { mapping = msg[&apos;tag00200013&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;instanceNumber&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>instanceNumber</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00200013&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>35</sequenceNumber>
              <name>protocolName</name>
              <script>var mapping;try { mapping = msg[&apos;tag00181030&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;protocolName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>protocolName</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00181030&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>36</sequenceNumber>
              <name>imageType</name>
              <script>var mapping;try { mapping = msg[&apos;tag00080008&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;imageType&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>imageType</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00080008&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>37</sequenceNumber>
              <name>viewPosition</name>
              <script>var mapping;try { mapping = msg[&apos;tag00185101&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;viewPosition&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
              <type>Mapper</type>
              <data class="map">
                <entry>
                  <string>Variable</string>
                  <string>viewPosition</string>
                </entry>
                <entry>
                  <string>DefaultValue</string>
                  <string></string>
                </entry>
                <entry>
                  <string>Mapping</string>
                  <string>msg[&apos;tag00185101&apos;].toString()</string>
                </entry>
                <entry>
                  <string>RegularExpressions</string>
                  <list/>
                </entry>
                <entry>
                  <string>isGlobal</string>
                  <string>channel</string>
                </entry>
              </data>
            </step>
          </steps>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundProtocol>DICOM</inboundProtocol>
          <outboundProtocol>DICOM</outboundProtocol>
          <inboundProperties/>
          <outboundProperties/>
        </transformer>
        <filter>
          <rules/>
        </filter>
        <transportName>DICOM Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <version>2.2.3.6825</version>
      </sourceConnector>
      <destinationConnectors>
        <connector>
          <name>Destination 1</name>
          <properties>
            <property name="DataType">Database Writer</property>
            <property name="URL">jdbc:postgresql://localhost:5432/ddw</property>
            <property name="driver">org.postgresql.Driver</property>
            <property name="host">query</property>
            <property name="password">postgres</property>
            <property name="query"></property>
            <property name="script">///////////////////////////////////////
// Dicom Data Warehouse (DDW)
// Author: Steve G Langer April 2011
// Purpose: Mirth Dicom channel for the DDW dbase
///////////////////////////////////////
try {
	var func = &quot;mirth:main &quot;;
	logError (&quot;\n\n\n start &quot; + func + DateUtil.getCurrentDate(&apos;yyyy-M-d H:m:s&apos;));
	//var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://localhost:5432/ddw&apos;,&apos;postgres&apos;,&apos;medic4Img&apos;);
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://ddw-dbase:5432/ddw&apos;,&apos;postgres&apos;,&apos;postgres&apos;);
	//logger.info (&apos;1 &apos; + dbConn);
	//get whole DICOM header, mine them in mapCustomTags()
    var msg = new XML(messageObject.getTransformedData().toString());
	var updatePatient, updateExam, updateSeries, updateAcq, updateInstance, updateAlert ;
	var parmPatient, parmExam, parmSeries, parmAcq, parmInstance, parmAlert ;
	var checkVersion, checkAlert, checkExams; 
	var parmVersion,  parmCheckAlert, parmCheckExams; 
	var checkLast, parmLast, updateLast, parmUpdateLast; 
	var Production = true, Archive = false ;

	buildStrings ()

	// check if this scanner Version is known
	var result = qryExist (checkVersion, parmVersion);
	if (!result.next()) {
		var s = &quot;unknown_version&gt; on &quot; + $(&apos;stationName&apos;) + &quot;; &quot; + $(&apos;manufacturersModelName&apos;) + &quot;; &quot; + $(&apos;softwareVersions&apos;);
		throw s ;
	} else {
		var versionID = result.getString(&apos;version_id&apos;);
	}
	
	//Accelerator Section, if activated
	// this will cause only first object in a series to be indexed
	if (!Archive) {
		var result = qryExist (checkLast, parmLast);
		if (!result.next() ) {
			result = dbaseUpdate (updateLast, parmUpdateLast);
			//logger.info(&apos;updated last_uid table &apos; + $(&apos;seriesInstanceUid&apos;)) ;
		} else {
			//logger.info (&apos;in breakout, series = &apos; + $(&apos;seriesInstanceUid&apos;));
			throw new breakout() ;
		}
	}

	// Bail if patient info is null
	if ( $(&apos;patientId&apos;) == &apos;&apos; || $(&apos;patientsName&apos;) == &apos;&apos;) {
		var s = &quot;no_patient&gt; info, aborting. StudyUID = &quot; + $(&apos;studyInstanceUid&apos;);
		throw s;
	}

	// Now create patient -only- if patient is not known
	result = dbaseUpdate (updatePatient, parmPatient);

	// create Exam row -only- if examUID is unknown
	result = dbaseUpdate (updateExam, parmExam);
	result = mapCustomTags(&quot;exam&quot;);	

	// create Series row -only- if seriesUID is unknown
	// We could not know versionID at buildStrings()
	parmSeries.add (versionID );
	parmSeries.add ( $(&apos;seriesTime&apos;) );
	parmSeries.add ( $(&apos;modality&apos;)  );
	result = dbaseUpdate (updateSeries, parmSeries);
	result = mapCustomTags(&quot;series&quot;);		

	// create Acquisition row -only- if does not exist
	result = dbaseUpdate (updateAcq, parmAcq);
	result = mapCustomTags(&quot;acquisition&quot;);

	// create Instance row  -only- if instanceUID is unknown
	result = dbaseUpdate (updateInstance, parmInstance);
	result = mapCustomTags(&quot;instance&quot;);
	// this if-block is for the instance binary object table (i.e DOSE SC)
	if ($(&apos;modality&apos;).indexOf(&apos;CT&apos;) &gt; -1 &amp;&amp; $(&apos;imageType&apos;).indexOf(&apos;SECONDARY&apos;) &gt; -1 ) {
        var jpegs = new DICOMUtil.convertDICOM(&apos;jpg&apos;, messageObject);
		parms = new java.util.ArrayList();
		parms.add ($(&apos;sopInstanceUid&apos;));
		parms.add ($(&apos;studyDate&apos;));
		parms.add (messageObject.getTransformedData());
		parms.add (FileUtil.decode(jpegs));
		dbaseUpdate(&quot;INSERT INTO instance_binary_object (instance_uid, date_of_exam, header, content) VALUES (?, ?, ?, ?)&quot;, parms);
	} else if (Archive ) {
		parms = new java.util.ArrayList();
		parms.add ($(&apos;sopInstanceUid&apos;));
		parms.add ($(&apos;studyDate&apos;));
		parms.add (messageObject.getTransformedData());
		dbaseUpdate(&quot;INSERT INTO instance_binary_object (instance_uid, date_of_exam, header) VALUES (?, ?, ?)&quot;, parms);
	}

	// Last update the Exams_to_Process table
	result = dbaseUpdate (updateExamProcess, parmExamProcess);
}
catch (e if e instanceof breakout) {
	//logError (&quot;catch breakout&quot;) ;
	x = 1;
}
catch (ee) {
	var err_str = &quot;Exception in &quot; + func + &quot;\n&quot; + ee ;
	logger.info (err_str);
	var alert_type = ee.substring(0, ee.indexOf(&apos;&gt;&apos;)) ;
	parmCheckAlert.add (alert_type);
	result = qryExist (checkAlert, parmCheckAlert);

	if (Production &amp;&amp; result.next() ) {
		// write to logFile, dbase and if urgent email
		logError (err_str + &quot;\n exception end&quot; );
		parmAlert.add (result.getString(&apos;alert_type&apos;));
		parmAlert.add (err_str);
		dbaseUpdate (updateAlert, parmAlert);
		if (result.getString(&apos;criticality&apos;) &gt;1) {
			sendEmail(result.getString(&apos;email_to_address&apos;), &apos;&apos;, result.getString(&apos;email_title&apos;), err_str) ;
		}
	} else {
		logError (err_str + &quot;\n exception end&quot; );
	}
}
finally {
	dbConn.close();
	logError (&quot;normal end &quot; + DateUtil.getCurrentDate(&apos;H:m:s&apos;));
}

	
function breakout () {
/////////////////////////////
// Purpose: stub for exception handling
// caller: main try
///////////////////////////////
	func = &quot;mirth:breakout &quot;;
	return ;
}


function buildStrings () {
////////////////////////////////////
// Purpose: Centrallize all SQL here
// Caller: main
/////////////////////////////////////
	func = &quot;mirth:buildStrings &quot;;

	// check last UIDs
	checkLast = &quot;SELECT series from last_uids WHERE gateway ~* ? and series ~* ? &quot; ;
	parmLast = new java.util.ArrayList();
	parmLast.add(&apos;mcr-dit2&apos;) ;
	parmLast.add($(&apos;seriesInstanceUid&apos;)) ;
	
	updateLast = &quot;UPDATE last_uids SET study=?, series=?, instance=? where gateway=&apos;mcr-dit2&apos; &quot;;
	parmUpdateLast = new java.util.ArrayList();
	parmUpdateLast.add( $(&apos;studyInstanceUid&apos;)); 
	parmUpdateLast.add( $(&apos;seriesInstanceUid&apos;)) ;
	parmUpdateLast.add( $(&apos;sopInstanceUid&apos;));

	// check version
	checkVersion = &quot;SELECT version_id FROM known_scanners WHERE model ~* ? AND vers ~* ?&quot; ;
	parmVersion = new java.util.ArrayList();
	parmVersion.add( $(&apos;manufacturersModelName&apos;));
	parmVersion.add($(&apos;softwareVersions&apos;).replace(&apos;\\&apos;,&apos;_&apos;));

	// check-update patient
	updatePatient = &quot;INSERT INTO patient (pat_name, dob, local_pat_id, mpi_pat_id, gender) VALUES (?,?,?,?,?)&quot;;
	parmPatient = new java.util.ArrayList();
	parmPatient.add ( $(&apos;patientsName&apos;) );
	parmPatient.add ( $(&apos;patientsBirthDate&apos;) );
	parmPatient.add ( $(&apos;patientId&apos;) );
	parmPatient.add ( $(&apos;patientId&apos;) );
	parmPatient.add ( $(&apos;patientsSex&apos;) );
	//parmPatient.add (parseInt($(&apos;patientsSize&apos;)));
	//parmPatient.add (parseInt($(&apos;patientsWeight&apos;)));

	// check-update examUID
	checkExams = &quot;SELECT accession FROM exams WHERE exam_uid ~* ?&quot;;
	parmCheckExams  = new java.util.ArrayList();
	parmCheckExams.add ($(&apos;studyInstanceUid&apos;));

	updateExam = &quot;INSERT INTO exams (mpi_pat_id, exam_uid, accession, date_of_exam, time_of_exam, refer_doc, exam_descrip, exam_code, campus, technologist, radiologist) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
	parmExam = new java.util.ArrayList();
	parmExam.add ( $(&apos;patientId&apos;));
	parmExam.add ($(&apos;studyInstanceUid&apos;));
	parmExam.add ( $(&apos;accessionNumber&apos;));
	parmExam.add ( $(&apos;studyDate&apos;));
	parmExam.add ($(&apos;studyTime&apos;) );
	parmExam.add ( $(&apos;referringPhysiciansName&apos;));
	parmExam.add ( $(&apos;studyDescription&apos;));
	parmExam.add ( &apos;&apos;);
	parmExam.add ( $(&apos;institutionName&apos;));
	parmExam.add ( $(&apos;operatorsName&apos;));
	parmExam.add ( $(&apos;nameOfPhysiciansReadingStudy&apos;));
	
	// check-update seriesUID
	updateSeries = &quot;INSERT INTO series (exam_uid, series_uid, station_id, aet, series_description, protocol_name, series_name, body_part, series_number, version_id, series_time, modality) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
	parmSeries = new java.util.ArrayList();
	parmSeries.add ($(&apos;studyInstanceUid&apos;) );
	parmSeries.add ( $(&apos;seriesInstanceUid&apos;) );
	parmSeries.add ( $(&apos;stationName&apos;));
	parmSeries.add ( $(&apos;sourceApplicationEntityTitle&apos;));
	parmSeries.add ( $(&apos;seriesDescription&apos;) );
	parmSeries.add ( $(&apos;protocolName&apos;));
	parmSeries.add ( $(&apos;seriesDescription&apos;));
	parmSeries.add ( $(&apos;bodyPartExamined&apos;));
	parmSeries.add ( $(&apos;seriesNumber&apos;));
	///// VersionID add deferred until call to dbaseUpdate

	// check-update Acquisition
	updateAcq = &quot;INSERT INTO acquisition (acq_time, acq_number, sop_class, exam_uid, series_uid, event_uid) VALUES (?, ?, ?, ?, ?, ?)&quot;;
	parmAcq = new java.util.ArrayList();
	parmAcq.add ($(&apos;acquisitionTime&apos;));
	parmAcq.add ($(&apos;acquisitionNumber&apos;));
	parmAcq.add ($(&apos;sopClassUid&apos;));
	parmAcq.add ($(&apos;studyInstanceUid&apos;));
	parmAcq.add ($(&apos;seriesInstanceUid&apos;));
	parmAcq.add (&apos;&apos;);

	// check-update InstanceUID
	updateInstance = &quot;INSERT INTO instance (exam_uid, series_uid, instance_uid, content_time, instance_number, image_type) VALUES (?, ?, ?, ?, ?, ?)&quot;;
	parmInstance = new java.util.ArrayList();
	parmInstance.add ($(&apos;studyInstanceUid&apos;));
	parmInstance.add ($(&apos;seriesInstanceUid&apos;));
	parmInstance.add ($(&apos;sopInstanceUid&apos;));
	parmInstance.add ($(&apos;contentTime&apos;));
	parmInstance.add ($(&apos;instanceNumber&apos;));
	parmInstance.add ( $(&apos;imageType&apos;));

	// check-Update Exam_to_Process
	updateExamProcess = &quot;INSERT INTO exams_to_process (exam_uid, modality, run_trial) VALUES (?, ?, ?)&quot;;
	parmExamProcess =  new java.util.ArrayList();
	parmExamProcess.add ($(&apos;studyInstanceUid&apos;));
	parmExamProcess.add ($(&apos;modality&apos;));
	parmExamProcess.add (0);
	
	// check-update Alert_types
	checkAlert = &quot;SELECT * FROM dict_alert_types WHERE alert_type ~* ?&quot;;
	parmCheckAlert = new java.util.ArrayList();
	///// defer add until Catch

	updateAlert = &quot;INSERT INTO alerts (exam_uid, mpi_pat_id, date_open, alert_type, message) VALUES (?, ?, ?, ?, ?)&quot;;
	parmAlert = new java.util.ArrayList();
	parmAlert.add ($(&apos;studyInstanceUid&apos;));
	parmAlert.add ($(&apos;patientId&apos;));
	parmAlert.add (DateUtil.getCurrentDate(&apos;yyyy-M-d H:m:s&apos;));
	////// other elements deferred until Catch

	return ;
}

function dbaseUpdate (str, params) {
////////////////////////////////////
// Purpose: Centralize dbase updates and
//	error handling
// Caller: Main and mapCustomTags
/////////////////////////////////////
	func= &quot;mirth:dbaseUpdate &quot;;
	
	if ($(&apos;modality&apos;) == &apos;CT&apos; &amp;&amp; str.indexOf(&apos;INTO exams &apos;) &gt; -1) {
		// here over-ride the Exam Insert statement until we find bad data
		//logger.info (func + &apos; &apos; + &apos;in update override&apos;);
	}

	try {
		var loc_result = dbConn.executeUpdate (str, params);
	}
	catch (ee) {
		// If here,  likely that we violated a UNIQUE constraint
		logError (func, + &apos;unable to Update table &apos; + loc_result.next() );
		logger.info (&apos;dbaseUpdate fail &apos; + loc_result.next() );
	}
	finally {
		if (loc_result != 1 &amp;&amp; loc_result != undefined ) {
			logger.error (&apos;dbaseUpdate results &apos; + str + &apos; &apos; + params + &apos; is &apos; + loc_result );
			//logger.info (loc_result + loc_result.next);
		}
		return loc_result;
	}
}


function qryExist (str, param) {
////////////////////////////////////
// Purpose: Centralize dbase qry and error
//	handling
// Caller: Main and mapCustomTags()
/////////////////////////////////////
	func = &quot;mirth:qryExist &quot;;

	//logError (str + param);
	var loc_result = dbConn.executeCachedQuery(str, param);
	//logger.info (&apos;qryExist result  &apos; + loc_result.next);
	return loc_result;
}


function mapCustomTags (scope) {
/////////////////////////////////////////////
// Purpose: This is the secret sauce that
//	enables indexing arbitrary tags per Version
//	w/out new Tables/Columns or NoSQL
// Caller: Exam/Series/Instance update Blocks in main
/////////////////////////////////////////////
	var loc_func = &quot;mirth:mapCustomTags &quot;;
	var strUpdate, uid ;
	var parmUpdate = new java.util.ArrayList();
	var strQry = &quot;SELECT std_name, unit, dicom_grp_ele FROM mapp_view WHERE scope ~* ? AND version_id = ?&quot;;
	var parmQry = new java.util.ArrayList();

	parmQry.add (scope);
	parmQry.add (parseInt(versionID)); //does this need parseInt now that it&apos;s not an oid?

	if (scope == &apos;exam&apos;) {
		strUpdate = &quot;INSERT INTO exams_mapped_values (exam_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;studyInstanceUid&apos;) ;
	} else if (scope == &apos;series&apos;) {
		//logError (&apos;mapCustom tags series&apos;);
		strUpdate = &quot;INSERT INTO series_mapped_values (series_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid =  $(&apos;seriesInstanceUid&apos;) ;
	} else if (scope == &apos;acquisition&apos;) {
		strUpdate = &quot;INSERT INTO acquisition_mapped_values (event_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;&apos;) ;
	} else if (scope == &apos;instance&apos;) {
		strUpdate = &quot;INSERT INTO instance_mapped_values (instance_uid, std_name, value, unit) VALUES (?, ?, ?, ?)&quot;;
		uid = $(&apos;sopInstanceUid&apos;) ;
	}

	// need a View linking stdNames to mappedValues, then Qry the View for the 
	// list of custom tags. Loop over the result set, and pluck named tags from
	// -var msg- defined in the try block
	result = qryExist (strQry, parmQry) ;
	while (result.next() ) {
		parmUpdate.add (uid);
		parmUpdate.add (result.getString(&apos;std_name&apos;) );
		var string = &apos;&apos; ;

		if (result.getString(&apos;std_name&apos;).indexOf(&apos;dose_SR&apos;) &gt; -1 ) {
			var items = msg[result.getString(&apos;dicom_grp_ele&apos;)][&apos;item&apos;];
			if (items.length() &gt; 0) {
				string = items[result.getString(&apos;dicom_grp_ele&apos;)].toString() ;
				logger.info(&apos;CT-SR string 2 : &apos; + string);
			} else {
				// SR object won&apos;t have most (if any) of other tags we Map so ...
				logger.info(&apos;else1 : &apos; + result.getString(&apos;dicom_grp_ele&apos;));
				logger.info(&apos;else2 : &apos; + msg[result.getString(&apos;dicom_grp_ele&apos;)].toString());
				continue ; 
			}
		} else {
			string =  msg[result.getString(&apos;dicom_grp_ele&apos;)].toString() ;
		}

		if ( (string.indexOf(&apos;\\&apos;) == 2) &amp;&amp; string.indexOf(&apos;-&apos;) &gt; 0) { 
			// if it starts with &apos;xx\&apos; its a Hex string, but be careful
			// if it&apos;s Direction Cosines it looks like -1\0\1\0\0
			logger.info (&quot;in Hex &quot; + result.getString(&apos;dicom_grp_ele&apos;));
			var str2 = convert_shadowHex_to_ASCII(string);
			parmUpdate.add (str2) ;
		}
		else {
			//logError (&quot;in else &quot; + result.getString(&apos;dicom_grp_ele&apos;));
			//logger.info (&quot;in Hex else &quot; + result.getString(&apos;dicom_grp_ele&apos;) + &quot; = &quot; + string);
			parmUpdate.add (string);		
		}
		parmUpdate.add ( result.getString(&apos;unit&apos;) );
		var loc_result = dbaseUpdate (strUpdate, parmUpdate);
		if (loc_result != 1 &amp;&amp; $(&apos;modality&apos;) == &apos;CT&apos;) {
			//logger.info (loc_func + &apos; &apos; + strUpdate + parmUpdate);
		}
		parmUpdate.clear();
	}
}



</property>
            <property name="useScript">1</property>
            <property name="username">postgres</property>
          </properties>
          <transformer>
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundProtocol>DICOM</inboundProtocol>
            <outboundProtocol>DICOM</outboundProtocol>
            <inboundProperties/>
            <outboundProperties/>
          </transformer>
          <filter>
            <rules/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <version>2.2.3.6825</version>
        </connector>
        <connector>
          <name>Destination 2</name>
          <properties>
            <property name="DataType">File Writer</property>
            <property name="FTPAnonymous">1</property>
            <property name="binary">0</property>
            <property name="charsetEncoding">DEFAULT_ENCODING</property>
            <property name="errorOnExists">0</property>
            <property name="host">/opt/mirth/error_images</property>
            <property name="outputAppend">0</property>
            <property name="outputPattern">transformed.rtf</property>
            <property name="passive">1</property>
            <property name="password">anonymous</property>
            <property name="scheme">file</property>
            <property name="secure">1</property>
            <property name="template">here:
${date.get(&apos;yyyy-M-d H.m.s&apos;)}
${patientsName}
${patientId}
${sourceApplicationEntityTitle}
${message.transformedData}</property>
            <property name="temporary">0</property>
            <property name="timeout">10000</property>
            <property name="username">anonymous</property>
            <property name="validateConnections">1</property>
          </properties>
          <transformer>
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundProtocol>DICOM</inboundProtocol>
            <outboundProtocol>DICOM</outboundProtocol>
            <inboundProperties/>
            <outboundProperties/>
          </transformer>
          <filter>
            <rules/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <version>2.2.3.6825</version>
        </connector>
      </destinationConnectors>
      <properties>
        <property name="clearGlobalChannelMap">true</property>
        <property name="dont_store_filtered">false</property>
        <property name="encryptData">false</property>
        <property name="error_messages_only">false</property>
        <property name="initialState">started</property>
        <property name="max_message_age">-1</property>
        <property name="store_messages">false</property>
        <property name="synchronous">true</property>
        <property name="transactional">false</property>
      </properties>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data


return;

</deployScript>
      <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
    </channel>
  </channels>
  <alerts/>
  <codeTemplates>
    <codeTemplate>
      <id>4c26414c-82e6-4a40-a4c4-c065f7e6532a</id>
      <name>convert_shadowHex_to_ASCII</name>
      <tooltip>take an DICOM shadows Hex group and return an ASCII string</tooltip>
      <code>function convert_shadowHex_to_ASCII(str) {
////////////////////////////////////////////////////
// Purpose: take in a shadow group in Hex, return ASCII string
// Caller: DICOM parser channel
//
/////////////////////////////////////////////////
	var substr, str2=&quot;&quot;, buf=&quot;&quot;;
	//t_logError (&quot;entering convert \n&quot; + str);

	while (str.length &gt; 3) {
	  substr  = &quot;0x&quot; + str.slice(0, str.indexOf(&apos;\\&apos;)) ;
	  str2 = String.fromCharCode(substr);
	  buf = buf + str2 ;
	  str = str.substring(str.indexOf(&apos;\\&apos;)+ 1); 
	}
	//t_logError (&quot;exiting convert \n&quot; + buf);
	return buf;
}</code>
      <type>FUNCTION</type>
      <scope>2</scope>
      <version>2.2.3.6825</version>
    </codeTemplate>
    <codeTemplate>
      <id>b2840940-9e61-4960-a5f4-3f96848f852a</id>
      <name>t_logError</name>
      <tooltip>global template for Test logging</tooltip>
      <code>function t_logError (str) {
////////////////////////////////////
// Purpose: Central output for debug messaging
// Caller: throughout this code
/////////////////////////////////////
	str = str + &quot;\n&quot; ;
   	FileUtil.write(&apos;/media/dbase/error_images/test-log.rtf&apos;, true, str);
	return ;
}</code>
      <type>FUNCTION</type>
      <scope>3</scope>
      <version>2.2.3.6825</version>
    </codeTemplate>
    <codeTemplate>
      <id>65d692d7-becc-4150-8975-3e53877c0908</id>
      <name>sendEmail</name>
      <tooltip>used in Catch blocks to alert user of Critical error (in addition to log file and dbase)</tooltip>
      <code>function sendEmail(to, cc, title, content){
////////////////////////////////////
// Purpose: For Exceptions in Prod, this
//		emails ALerts to &quot;to&quot;
// Caller: Catch
//
// var smtpConn = SMTPConnectionFactory.createSMTPConnection();
// smtpConn.send(&apos;to&apos;, &apos;cc&apos;, &apos;from&apos;, &apos;subject&apos;, &apos;body&apos;);
/////////////////////////////////////
   var host = &apos;smtprelay.mayo.edu&apos;;
   var port = &apos;25&apos; , auth = false, secure = &apos;&apos;, password = &apos;&apos;;
   var username = &apos;dlradtrac@mayo.edu&apos;, from = &apos;dlradtrac@mayo.edu&apos;;
   var smtpConn = new SMTPConnectionFactory.createSMTPConnection(host, port, auth, secure, username, password);
   smtpConn.send(to, cc, from, title, content);
}
</code>
      <type>FUNCTION</type>
      <scope>3</scope>
      <version>2.2.3.6825</version>
    </codeTemplate>
    <codeTemplate>
      <id>f43b2d54-07d9-43c6-8a4f-f36ba1856c33</id>
      <name>logError</name>
      <tooltip>global logging func for Prod Log</tooltip>
      <code>function logError (str) {
////////////////////////////////////
// Purpose: Central output for debug messaging
//		Use this version for Prod Log
// Caller: throughout this code
/////////////////////////////////////
	str = str + &quot;\n&quot; ;
   	FileUtil.write(&apos;/media/dbase/error_images/log.rtf&apos;, true, str);
	return ;
}</code>
      <type>FUNCTION</type>
      <scope>3</scope>
      <version>2.2.3.6825</version>
    </codeTemplate>
  </codeTemplates>
  <serverSettings>
    <clearGlobalMap>true</clearGlobalMap>
    <maxQueueSize>0</maxQueueSize>
    <smtpTimeout>5000</smtpTimeout>
    <smtpSecure>0</smtpSecure>
    <smtpAuth>false</smtpAuth>
  </serverSettings>
  <updateSettings>
    <firstLogin>false</firstLogin>
    <updatesEnabled>true</updatesEnabled>
    <statsEnabled>true</statsEnabled>
    <updateUrl>http://updates.mirthcorp.com</updateUrl>
    <lastStatsTime>1435767529079</lastStatsTime>
  </updateSettings>
  <globalScripts>
    <entry>
      <string>Shutdown</string>
      <string>// This script executes once when all channels shut down from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Deploy</string>
      <string>// This script executes once when all channels start up from a redeploy
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Preprocessor</string>
      <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
    </entry>
    <entry>
      <string>Postprocessor</string>
      <string>// This script executes once after a message has been processed
// This script applies across all channels
return;</string>
    </entry>
  </globalScripts>
  <pluginProperties>
    <entry>
      <string>Message Pruner</string>
      <properties>
        <property name="allowBatchPruning">1</property>
        <property name="interval">daily</property>
        <property name="pruningBlockSize">0</property>
        <property name="time">12:00 AM</property>
      </properties>
    </entry>
  </pluginProperties>
</serverConfiguration>